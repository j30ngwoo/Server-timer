# .github/workflows/release-build.yml
name: Release (Windows + macOS)

on:
  push:
    tags:
      - "v*"
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        shell: pwsh
        run: |
          if (Test-Path requirements.txt) { pip install -r requirements.txt }

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Build with PyInstaller
        shell: pwsh
        working-directory: src
        run: |
          pyinstaller main.py --onefile --noconsole `
            --paths . `
            --hidden-import app_sync `
            --hidden-import ui `
            --hidden-import constants `
            --name "${{ github.event.repository.name }}" `
            --distpath ../out --workpath ../build --specpath ../build --clean

      - name: Rename artifact for release
        shell: pwsh
        run: |
          $newName = "${{ github.event.repository.name }}-${{ github.ref_name }}-windows.exe"
          Move-Item -Path "out/${{ github.event.repository.name }}.exe" -Destination "out/$newName"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifact
          path: out/*.exe

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Build with PyInstaller
        working-directory: src
        run: |
          pyinstaller main.py --onefile --noconsole \
            --paths . \
            --hidden-import app_sync \
            --hidden-import ui \
            --hidden-import constants \
            --name "${{ github.event.repository.name }}" \
            --distpath ../out --workpath ../build --specpath ../build --clean

      - name: Zip & rename artifact
        run: |
          NAME="${{ github.event.repository.name }}"
          TAG="${{ github.ref_name }}"
          mv "out/${NAME}" "out/${NAME}-${TAG}-macos"
          (cd out && zip -r "${NAME}-${TAG}-macos.zip" "${NAME}-${TAG}-macos")
          rm -rf "out/${NAME}-${TAG}-macos"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifact
          path: out/*.zip

  release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
          pattern: "*-artifact"

      - name: Generate release notes
        run: |
          {
            echo "## Release Notes for ${{ github.ref_name }}"
            echo ""
            echo "This is an automated release. See below for downloadable assets."
            echo ""
            echo "### Assets"
            echo "A list of files included in this release:"
            ls -l dist
          } > NOTES.md

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body_path: NOTES.md
          files: |
            dist/*.exe
            dist/*.zip
